openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: Auth API
    url: https://virtserver.swaggerhub.com/BenjaminMarquis/Authentication/1.0.0
info:
  description: Auth API microservice
  version: 2.0.0
  title: Auth API

  
paths:

  /register:
    post:
      summary: Register new user
      operationId: registerUser
      description: Register a new user with an email to send a link to set password by email including a short live token
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          $ref : '#/components/responses/200Success'
        '401':
          $ref : '#/components/responses/401NotAuthenticated'
        '500':
          $ref: '#/components/responses/500ServerError'
  
  /set-password:
    patch:
      summary: Set a new password
      operationId: setPassword
      description: Will change the user's password using passing the token from the email and log him/her in the app generating a new long live jwt auth token
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPasswordRequest'
      responses:
        '200':
          description: User changed the password and has been logged in with fresh jwt token, it set a http only cooky containing encrypted info about user in a JWT token and an accessible cookie with some info about user to be used by client app
          headers: 
            Set-Cookie:
              $ref: '#/components/schemas/LoggedInCookies'

        '401':
          $ref : '#/components/responses/401NotAuthenticated'
        '500':
          $ref: '#/components/responses/500ServerError'

  /check-token:
    get:
      summary: Check if the token of the user is still valid
      operationId: checkToken
      description: Check if the token of the user is still valid using the token sent in the auth cookie
      security:
      - CookieAuth: []
      responses:
        '200':
          $ref : '#/components/responses/200Success'
        '401':
          $ref : '#/components/responses/401NotAuthenticated'
        '500':
          $ref: '#/components/responses/500ServerError'
  
  /login:
    post:
      summary: Login user
      operationId: login
      description: Login a user with it's credentials generating a new JWT token that will be sent in the HTTP only auth cookie
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: The User has successfully logged in, a fresh JWT token has been generated and sent by HTTP only cookie
          headers: 
            Set-Cookie:
              $ref: '#/components/schemas/LoggedInCookies'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  user:
                    $ref: '#/components/schemas/User'
                  
        '401':
          description: Could not login user
          content:
            application/json:
              schema:
                oneOf:
                  - $ref : '#/components/responses/401NotAuthenticated'
                  - $ref : '#/components/responses/401LoginError'
        '500':
          $ref: '#/components/responses/500ServerError'
      
  
  /logout:
    post:
      summary: Logout a user
      operationId: logout
      description: Logout a user, it will either revoke the token sent in the body of the request or it will use the token in sent in the auth cookie
      security:
      - CookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          $ref : '#/components/responses/200Success'
        '401':
          $ref : '#/components/responses/401NotAuthenticated'
        '500':
          $ref: '#/components/responses/500ServerError'
          
  /logout-all:
    delete:
      summary: Logout all tokens
      operationId: logoutAll
      description: Delete all tokens of a user authenticated in the sent auth cookie
      security:
      - CookieAuth: []
      responses:
        '200':
          $ref : '#/components/responses/200Success'
        '401':
          $ref : '#/components/responses/401NotAuthenticated'
        '500':
          $ref: '#/components/responses/500ServerError'
  
  /request-password-reset:
    post:
      summary: request a password reset
      operationId: requestPasswordReset
      description: Will request a link to reset the password, an email will be sent to the user with a short live token to reset his password
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestPasswordResetRequest'
      responses:
        '200':
          $ref : '#/components/responses/200Success'
        '401':
          $ref : '#/components/responses/401NotAuthenticated'
        '500':
          $ref: '#/components/responses/500ServerError'
          
  /register-third-party:
    post:
      summary: Third party SSO login
      operationId: registerThirdParty
      description: Register a new user through a third party login either creating a new user or updating one found in the db, it will generate a new long live token sent in the auth cookie
      security:
      - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterThirdPartyRequest'
      responses:
        '200':
          description: The user has been register or updated and a fresh JWT token has been sent
          headers: 
            Set-Cookie:
              $ref: '#/components/schemas/LoggedInCookies'
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    $ref: '#/components/schemas/Token'
        '401':
          $ref : '#/components/responses/401NotAuthenticated'
        '500':
          $ref: '#/components/responses/500ServerError'
  
components:
  
  schemas:

    RegisterRequest:
      description: register third party payload
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          example: example@email.com
    
    SetPasswordRequest:
      description: password set payload
      type: object
      required:
       - password
      properties:
        password:
          type: string
          example: Password23
        token:
          type: string
          format: token
          example: eyJhbGciOiJIUzI1NiJ9.VTJGc2RHVmrtyyamdocU15bVBHTnVRT1ZPUjVyeDdSTlpWS2JNZmQ5UlRGVzlFSlNZY2NHZVU1RWpIVlE252oXyTfHA...


    RegisterThirdPartyRequest:
      description: register third party payload
      type: object
      required:
       - user
      properties:
        user:
          type: object
          required:
           - email
          properties:
            email:
              type: string
              format: email
              example: example@email.com
            name:
              type: string
              example: Manuel
            profilePicture:
              type: string
              format: http
              example: http://provider.com/avatarurl.png
            googleId:
              type: string
              example: "kuybyu9876"
  
    RequestPasswordResetRequest:
      description: password reset payload
      type: object
      required:
       - email
      properties:
        email:
          type: string
          format: email
          example: example@email.com
    
    
    LoginRequest:
      description: login payload
      type: object
      required:
       - email
       - password
      properties:
        email:
          type: string
          format: email
          example: example@email.com
        password:
          type: string
          example: Password23
   
    LogoutRequest:
      description: logout payload
      type: object
      required:
        - token
      properties:
        token:
            type: string
            format: token
            example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
  eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLC"

    LoggedInCookies:
      description: The cookies set on a successful login one containing encrypted information about the user inside a JWT token the other simple info about the user to be used by client app like profile picture
      type: string
      example: app.jtok=eyJhbGciOiJIUzI1NiJ9.VTJGcRQKzlvK2tOZm5NeVNJBVTU7y2EzdUZTc1FtT0hkZHlUbnJKdEhsQk9KYmxScTFtSWxqLzgwaUJwL1I.fMbZnq36TSI2d53eterFuc4bWIMjre4...; path=/; samesite=lax; httponly ; app.user={"uuid":"992c1be5-3239-4a58-8c0b-489b7c47fe7c","email":"user@email.com" ,"profilePicture":"https://profile.png"}; path=/; samesite=lax
   
   
    User:
      type: object
      required:
       - email
       - uuid
      properties:
        email:
          type: string
          format: email
          example: example@email.com
        uuid:
          type: string
          format: uuid
          example: 'ed8d3abc-2d91-4c81-a680-0ac662e0f5ab'
        name:
          type: string
          example: "Joana"
        profilePicture:
          type: string
          example: "http://profile.png"
        googleID:
          type: string
          example: "sds908J"
    
    Token:
      type: object
      properties:
        token:
          type: string
          format: token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwuY29tIiwiZXhwIjoxNDI2NDIwODAwLC"
        expiration:
          type: string
          format: date
          example: "2021-03-01T14:38:35.343Z"

    Error:
      type: object
      required:
        - status
        - error
        - message
      properties:
        status:
          type: integer
          example: "failed"
        error:
          type: string
          example: 'ActionError'
        message:
          type: string
          example: 'something went wrong with your action'
  
  responses:
  
    200Success:
      description: Simple success feddback
      content:
        application/json:
          schema:
            properties:
              status: 
                type: string
                example: "success"
    
    404NotFound:
      description: The ressource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    401NotAuthenticated:
      description: Not able to authenticate the bearer token
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - error
              - message
            example:
              status: 'failed'
              error: 'NotAuthenticatedError'
              message: 'You need to be authenticated to perform this action'
    
    401LoginError:
      description: Not able to login with given credentials
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - error
              - message
            example:
              status: 'failed'
              error: 'LoginError'
              message: 'Unable to login'
    
    500ServerError:
      description: The server encountered an error
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - error
              - message
            example:
              status: "failed"
              error: 'ServerError'
              message: 'Internal server error'
              
  
  securitySchemes:
    BearerAuth:
      description: The app required every request to be identified if the User is logged out the client app will identified itself with a Bearer Token
      type: http
      scheme: bearer
      bearerFormat: JWT
    
    CookieAuth:
      description: The app required every request to be identified if the User is logged in the requests of the user will be identified with a cookie containing encrypted information about the user inside a JWT token
      type: apiKey
      in: cookie
      name: app.jtok